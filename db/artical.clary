{"curindex":5,"data":[{"_id":"aca85a562f9714c092e942171698e6dc","id":1,"seo_url":"hello-world","title":"“hello, world” 起源及其他","intro":"在IT界，hello world向世界打招呼成为惯例","author":"wangcl","thumbnail":"1.jpg","content":"###　问题的提出\r\n　　相传古时候有个退休的程序员，在家闲来无事，决定修习书法之道。第一日，备好笔墨纸砚，便挥毫写下一行大字：“hello, world”。\r\n\r\n　　学过编程语言的人都笑了，在程序员心目中，hello world是一切的开始，程序语言教科书的第一个演示程序、WordPress的第一篇示例文章（我的hello world）、环境搭建成功后的第一个测试…\r\n\r\n　　可是，为什么呢？为什么都用”hello,world”来做程序语言的入门程序，以及其他这一切的开始呢？\r\n\r\n###　hello,world 起源\r\n\r\n　　可能还需要解释一下什么是“hello,world”：hello world是一个简短的小程序，其功能是在显示设备上输出一行“hello,world”。几乎每一个程序设计语言的教材中的第一个范例都是hello world程序，因此在学习一门新语言的时候用hello world作为起步已经成为计算机程序界的一个传统。\r\n\r\n　　hello world的起源要追溯到1972年，贝尔实验室著名研究员Brian Kernighan在撰写“B语言教程与指导(Tutorial Introduction to the Language B)”时初次使用（程序），这是目前已知最早的在计算机著作中将hello和world一起使用的记录。之后，在1978年，他在他和Dennis Ritchie合作撰写的C语言圣经“The C Programming Language”中，延用了“hello,world”句式，作为开篇第一个程序。在这个程序里，输出的”hello,world”全部是小写，没有感叹号，逗号后有一空格。虽然之后几乎没能流传下来这个最初的格式，但从此用hello world向世界打招呼成为惯例。\r\n\r\n临时测试文案","seo_title":"","seo_keyword":"","seo_description":"","params":"insert","updatetime":1425315223325,"createtime":1425223208256,"serial":0,"clicknum":0,"status":0},{"_id":"8a57e6ab107de8707ebe74a50076664e","id":5,"seo_url":"nodejs-mongoose-introdution","title":"mongoose入门学习","intro":"nodejs的数据库相关，mongoose入门学习","author":"wangcl","thumbnail":"5.jpg","content":"最近使用express+mongoose来搭建OA,发现mongoose真是的好东西，能建模，单单此功能就爱不射手了。\r\n### 基本用法\r\n首先先安装mongoose的相关依赖\r\n\r\n\t$ npm install mongoose --save\r\n下面将是基本调用方法，先建个Person的Model，通过Person的Model初始化实例，实例自带保存事件。\r\n\r\n\tvar mongoose = require(\"mongoose\");\r\n    mongoose.connect(\"mongodb://localhost/test\");\r\n    var Person = mongoose.model(\"Person\", {\r\n    \tname: String,\r\n        age: Number\r\n    });\r\n    var clary = new Person({\r\n    \tname: \"clary\",\r\n        age: \"11\"\r\n    });\r\n    clary.save(function(err){\r\n    \tif(err) // do errorthing;\r\n        // do something;\r\n    });\r\n    \r\n### Model增删查改\r\n数据库操作最基本的就是增删查改了，上面说了简易的保存（增），接下来将做Model的删查改。\r\n\r\n+ 删除\r\n\r\n官方API：  \r\n\r\n    Model#remove([fn])\r\n    Removes this document from the db.\r\n    Parameters:\r\n    [fn] <Function> optional callback\r\n实例，删除Person模型的数据：\r\n\r\n\tPerson.remove(function(err, data){\r\n    \tif(err) // do errorthing;\r\n        // data is del-data, do something;\r\n    });\r\n\r\n+ 查找\r\n\r\n官方API：\r\n\r\n\tModel.find(conditions, [fields], [options], [callback])\r\n\tFinds documents\r\n\tParameters:\r\n\tconditions <Object>\r\n\t[fields] <Object> optional fields to select\r\n\t[options] <Object> optional\r\n\t[callback] <Function>\r\n\tReturns:\r\n\t<Query>\r\n实例，查找Person模型中所有数据：\r\n\r\n\tPerson.find({}, {}, {}, function(err, data){\r\n    \tif(err) // do errorthing;\r\n        // data is all-data, do something;\r\n    });\r\n+ 修改\r\n\r\n官方API：\r\n\r\n\tModel.update(conditions, update, [options], [callback])\r\n\tUpdates documents in the database without returning them.\r\n\tParameters:\r\n\tconditions <Object>\r\n\tupdate <Object>\r\n\t[options] <Object>\r\n\t[callback] <Function>\r\n\tReturns:\r\n\t<Query>\r\n实例，修改Person模型中的某条数据\r\n\r\n\tPerson.update({\r\n    \tage: { $gt: 18 }\r\n    }, {\r\n    \tage: 20\r\n    }, {}, function(err, numberAffected, raw){\r\n    \tif(err) // do errorthing;\r\n        console.log(\"The number of updated record was %d\", numberAffected);\r\n        console.log(\"raw data was \", raw);\r\n    });\r\n### 通过数据模型为实例设置事件\r\n\r\n\tPerson.methods.constellation = function(){\r\n    \tconsole.log(this); // 实例数据\r\n        console.log(\"My constellation is \" + str);\r\n    }\r\n    var clary = new Person(...);\r\n    clary.constellation();\r\n    \r\n### 建模微进阶，架构数据在建模\r\n\r\n+ 一阶建模\r\n\r\n      var Schema = mongoose.Schema;\r\n      var PersonSchema = new Schema({\r\n\t\tname: String,\r\n        age: Number\r\n      });\r\n      var Person = mongoose.model(\"Person\", PersonSchema);\r\n      \r\n+ 多阶建模\r\n\r\n      var Schema = mongoose.Schema;\r\n      var actionSchema = new Schema({\r\n      \twalk: Function,\r\n        Height: Number\r\n      });\r\n      var PersonSchema = new Schema({\r\n\t\tname: String,\r\n        age: Number,\r\n        action: [actionSchema]\r\n      });\r\n      var Person = mongoose.model(\"Person\", PersonSchema);","seo_title":"","seo_keyword":"","seo_description":"","params":"insert","updatetime":1425918785295,"createtime":1425918504634,"serial":0,"clicknum":0,"status":0}]}