{"curindex":6,"data":[{"_id":"aca85a562f9714c092e942171698e6dc","id":1,"seo_url":"hello-world","title":"“hello, world” 起源及其他","intro":"在IT界，hello world向世界打招呼成为惯例","author":"wangcl","thumbnail":"1.jpg","content":"###　问题的提出\r\n　　相传古时候有个退休的程序员，在家闲来无事，决定修习书法之道。第一日，备好笔墨纸砚，便挥毫写下一行大字：“hello, world”。\r\n\r\n　　学过编程语言的人都笑了，在程序员心目中，hello world是一切的开始，程序语言教科书的第一个演示程序、WordPress的第一篇示例文章（我的hello world）、环境搭建成功后的第一个测试…\r\n\r\n　　可是，为什么呢？为什么都用”hello,world”来做程序语言的入门程序，以及其他这一切的开始呢？\r\n\r\n###　hello,world 起源\r\n\r\n　　可能还需要解释一下什么是“hello,world”：hello world是一个简短的小程序，其功能是在显示设备上输出一行“hello,world”。几乎每一个程序设计语言的教材中的第一个范例都是hello world程序，因此在学习一门新语言的时候用hello world作为起步已经成为计算机程序界的一个传统。\r\n\r\n　　hello world的起源要追溯到1972年，贝尔实验室著名研究员Brian Kernighan在撰写“B语言教程与指导(Tutorial Introduction to the Language B)”时初次使用（程序），这是目前已知最早的在计算机著作中将hello和world一起使用的记录。之后，在1978年，他在他和Dennis Ritchie合作撰写的C语言圣经“The C Programming Language”中，延用了“hello,world”句式，作为开篇第一个程序。在这个程序里，输出的”hello,world”全部是小写，没有感叹号，逗号后有一空格。虽然之后几乎没能流传下来这个最初的格式，但从此用hello world向世界打招呼成为惯例。\r\n\r\n临时测试文案","seo_title":"","seo_keyword":"","seo_description":"","params":"insert","updatetime":1425315223325,"createtime":1425223208256,"serial":0,"clicknum":0,"status":0},{"_id":"8a57e6ab107de8707ebe74a50076664e","id":5,"seo_url":"nodejs-mongoose-introdution","title":"mongoose入门学习","intro":"nodejs的数据库相关，mongoose入门学习","author":"wangcl","thumbnail":"5.jpg","content":"最近使用express+mongoose来搭建OA,发现mongoose真是的好东西，能建模，单单此功能就爱不射手了。\r\n\r\n### 基本用法\r\n\r\n首先先安装mongoose的相关依赖\r\n```\r\n$ npm install mongoose --save\r\n```\r\n下面将是基本调用方法，先建个Person的Model，通过Person的Model初始化实例，实例自带保存事件。\r\n```\r\nvar mongoose = require(\"mongoose\");\r\nmongoose.connect(\"mongodb://localhost/test\");\r\nvar Person = mongoose.model(\"Person\", {  \r\n    name: String,  \r\n    age: Number  \r\n});  \r\nvar clary = new Person({  \r\n    name: \"clary\",  \r\n    age: \"11\"  \r\n});  \r\nclary.save(function(err){  \r\n    if(err) // do errorthing;  \r\n    // do something;  \r\n});  \r\n``` \r\n\r\n### Model增删查改\r\n数据库操作最基本的就是增删查改了，上面说了简易的保存（增），接下来将做Model的删查改。\r\n\r\n+ 删除\r\n\r\n官方API：  \r\n```\r\nModel#remove([fn])\r\nRemoves this document from the db.\r\nParameters:\r\n[fn] <Function> optional callback\r\n```\r\n实例，删除Person模型的数据：\r\n```\r\nPerson.remove(function(err, data){\r\n    if(err) // do errorthing;\r\n    // data is del-data, do something;\r\n});\r\n```\r\n+ 查找\r\n\r\n官方API：\r\n```\r\nModel.find(conditions, [fields], [options], [callback])\r\nFinds documents\r\nParameters:\r\nconditions <Object>\r\n[fields] <Object> optional fields to select\r\n[options] <Object> optional\r\n[callback] <Function>\r\nReturns:\r\n<Query>\r\n```\r\n实例，查找Person模型中所有数据：\r\n```\r\nPerson.find({}, {}, {}, function(err, data){\r\n    if(err) // do errorthing;\r\n    // data is all-data, do something;\r\n});\r\n```\r\n+ 修改\r\n\r\n官方API：\r\n```\r\nModel.update(conditions, update, [options], [callback])\r\nUpdates documents in the database without returning them.\r\nParameters:\r\nconditions <Object>\r\nupdate <Object>\r\n[options] <Object>\r\n[callback] <Function>\r\nReturns:\r\n<Query>\r\n```\r\n实例，修改Person模型中的某条数据\r\n```\r\nPerson.update({\r\n    age: { $gt: 18 }\r\n}, {\r\n    age: 20\r\n}, {}, function(err, numberAffected, raw){\r\n    if(err) // do errorthing;\r\n    console.log(\"The number of updated record was %d\", numberAffected);\r\n    console.log(\"raw data was \", raw);\r\n});\r\n```\r\n\r\n### 通过数据模型为实例设置事件\r\n```\r\nPerson.methods.constellation = function(){\r\n    console.log(this); // 实例数据\r\n    console.log(\"My constellation is \" + str);\r\n}\r\nvar clary = new Person(...);\r\nclary.constellation();\r\n```\r\n\r\n### 建模微进阶，架构数据在建模\r\n+ 一阶建模\r\n```\r\nvar PersonSchema = mongoose.Schema({\r\n  name: String,\r\n  age: Number\r\n});\r\nvar Person = mongoose.model(\"Person\", PersonSchema);\r\n```\r\n+ 多阶建模\r\n```\r\nvar actionSchema = mongoose.Schema({\r\n    walk: Function,  \r\n    Height: Number  \r\n});  \r\nvar PersonSchema = mongoose.Schema({  \r\n    name: String,  \r\n    age: Number,  \r\n    action: [actionSchema]  \r\n});  \r\nvar Person = mongoose.model(\"Person\", PersonSchema);  \r\n```\r\n\r\n### 关联查询新增保存删除\r\n　　mongodb是非关系型数据，但在实际项目中仍有可能需要互相关联  \r\n目前较好的关联有，如下：\r\n+ 在建库时，调整建模的架构为最优（不用说也知道）\r\n+ 利用ref来关联两个model\r\n\r\n```\r\nvar Schema = mongoose.Schema();\r\nvar PersonSchema = new Schema({\r\n\tname: String,\r\n    age: Number,\r\n    phone_id: [{ type: Schema.types.ObjectId, ref: \"Study\" }]\r\n});\r\nvar Person = mongoose.model(\"Person\", PersonSchema);\r\nvar PhoneSchema = new Schema({\r\n\ttelephone: Number,\r\n    parent_id: { type: Schema.types.ObjectId, ref: \"Person\" }\r\n});\r\nvar Phone = mongoose.model(\"Phone\", PhoneSchema);\r\n```\r\n人有多个手机，这个手机只有一个人用，即有：  \r\nPerson => [Phone,Phone...], Phone => Person  \r\n所以Phone_id是一个数组，存储Phone的_id的集合  \r\n而parent_id只能存储单个Person的_id  \r\n模拟数据开始：\r\n```\r\nPerson.create({\r\n\tname: “clary”,\r\n    age: 18\r\n}).save();\r\n// 生成一条数据\r\n// _id: 8ur8wuer9u98u3r89823ur8\r\n// name: clary\r\n// age: 18\r\n// phone_id: []\r\nPhone.create({\r\n\ttelephone: 17788889999,\r\n    parent_id: \"8ur8wuer9u98u3r89823ur8\" //作用：查询phone时能反向查到使用该手机的人\r\n}).save(function(err, data){\r\n\t// 保存玩手机后，把手机的_id写入的Person的phone_id中\r\n\tif(err) {} // do something\r\n    Person.findById(\"8ur8wuer9u98u3r89823ur8\", function(err, doc){\r\n    \tif(err) {} // do something\r\n        doc[0].phone_id.push(data._id);\r\n        doc.save();\r\n    })\r\n});\r\n// 存第二个手机\r\nPhone.create({\r\n\ttelephone: 17788880000,\r\n    parent_id: \"8ur8wuer9u98u3r89823ur8\"\r\n}).save(function(err, data){\r\n\tif(err) {} // do something\r\n    Person.findById(\"8ur8wuer9u98u3r89823ur8\", function(err, doc){\r\n    \tif(err) {} // do something\r\n        doc[0].phone_id.push(data._id);\r\n        doc.save();\r\n    })\r\n});\r\n// 当前Phone数据\r\nvar p = [\r\n\t{\r\n    \t_id: \"df84gdf8gdfg9883dfdfg3f\",\r\n    \ttelephone: 17788889999,\r\n        parent_id: \"8ur8wuer9u98u3r89823ur8\"\r\n    },\r\n    {\r\n    \t_id: \"2u9849q209u8eru98238rur\",\r\n    \ttelephone: 17788880000,\r\n        parent_id: \"8ur8wuer9u98u3r89823ur8\"\r\n    }\r\n];\r\n// 当前Person数据\r\nvar c = [\r\n\t{\r\n    \t_id: \"8ur8wuer9u98u3r89823ur8\",\r\n        name: \"clary\",\r\n        age: 18,\r\n        phone_id: [\r\n        \t\"df84gdf8gdfg9883dfdfg3f\",\r\n            \"2u9849q209u8eru98238rur\"\r\n        ]\r\n    }\r\n]\r\n// 模拟数据完毕，开始查询\r\nPerson.find() // 先查询person\r\n\t.populate(\"phone_id\") // 填充person的ref关联的model数据\r\n    .exec(function(err, data){\r\n    \tif(err) {} // do something\r\n        console.log(data);\r\n    });\r\n//输出结果如下：\r\nvar c = [\r\n\t{\r\n    \t_id: \"8ur8wuer9u98u3r89823ur8\",\r\n        name: \"clary\",\r\n        age: 18,\r\n        phone_id: [\r\n        \t{\r\n                _id: \"df84gdf8gdfg9883dfdfg3f\",\r\n                telephone: 17788889999,\r\n                parent_id: \"8ur8wuer9u98u3r89823ur8\"\r\n            },\r\n            {\r\n                _id: \"2u9849q209u8eru98238rur\",\r\n                telephone: 17788880000,\r\n                parent_id: \"8ur8wuer9u98u3r89823ur8\"\r\n            }\r\n        ]\r\n    }\r\n]\r\n```\r\n \r\n","seo_title":"","seo_keyword":"","seo_description":"","params":"insert","updatetime":1426090506674,"createtime":1425918504634,"serial":0,"clicknum":0,"status":0},{"_id":"5f63aa2010a8a276c4db7780d8c45ccd","id":6,"seo_url":"nodejs-express-restful-api-method","title":"利用nodejs的express来开发rest api","intro":"restful web服务已成为热销的api，nodejs也是前端目前唯一的后台，将用此来开发restful api","author":"wangcl","thumbnail":"6.jpg","content":"### 基于nodejs搭建Rest Api\r\n#### 概述\r\n\r\n　　Rest是用资源的角度来观察整个网络，所有资源都通过URI来确定。  \r\n　　RESTful Web 服务（也称为 RESTful Web API）是一个使用HTTP并遵循REST原则的Web服务。它从以下三个方面资源进行定义：URI，比如：http://example.com/resources/。  \r\n　　对资源的操作包括获取、创建、修改、删除，刚好对应GET、POST、PUT、DELETE方法\r\n  \r\n#### REST开发\r\n利用express及其expressjs中间件来创建api  \r\nexpressjs需要中间件有：\r\n+ body-parser 解析来自客户端的request.body或req.body\r\n+ method-override 解析来自客户端method，使用方式app.get or app.post等等\r\n+ morgan 日志中间件，方便看请求是来自GET或POST或PUT或DELETE\r\n```\r\nvar express = require(\"express\")\r\n\t, bodyParser = require(\"body-parser\")\r\n    , methodOverride = require(\"method-override\")\r\n    , logger = require(\"morgan\");\r\nvar app = express();\r\napp.use(logger(\"dev\"));\r\napp.use(bodyParser());\r\napp.use(methodOverride());\r\napp.route(\"/restful/clary/artical\")\r\n\t.get(function(req, res){ ... })\r\n    .post(function(req, res){ ... })\r\n    .put(function(req, res){ ... })\r\n    .delete(function(req, res){ ... })\r\n    .all(function(req, res){ ... });\r\napp.listen(\"80\", function(){\r\n\tconsole.log(\"listent to 80\");\r\n});\r\n```\r\n\r\n#### 测试Rest\r\n+ chrome工具：hostman，自己代理来测试\r\n+ jquery的ajax测试  \r\n通过不同的type类型来分别请求GET、POST、PUT、DELETE\r\n```\r\n$.ajax({\r\n\turl: \"/restful/clary/artical\",\r\n    type: \"GET\", // GET、POST、PUT、DELETE\r\n    data: {\r\n    \ttitle: \"测试标题\",\r\n        content: \"测试内容\"\r\n    },\r\n    success: function(data){\r\n    \tconsole.log(\"success\");\r\n        console.log(data);\r\n    },\r\n    error: function(){\r\n    \tconsole.log(\"error\");\r\n    }\r\n});\r\n```\r\n","seo_title":"","seo_keyword":"","seo_description":"","params":"insert","updatetime":1426087576980,"createtime":1426087476246,"serial":0,"clicknum":0,"status":0}]}